@using QuizExperiment.Admin.Client.Enums
@using QuizExperiment.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

@if(_state == AdminUserState.PickingGame)
{
    <QuestionSetPicker OnQuestionSetSubmit="@OnQuestionSetSelected" />
}

@if(_state == AdminUserState.WaitingForGameStart)
{
    <GameStart Users="@_users" 
                QuestionSetId="@_questionSet.Id" 
                OnGameStarted="@OnGameStarted"
                OnGameRegistered="@OnGameRegistered"/>
}

@if(_state == AdminUserState.WaitingForAnswers)
{
    switch(_currentQuestion.Type)
    {
        case QuestionType.TypeAnswer:
            <TypeAnswerQuestionDisplay Question="@_currentQuestion.Title" />
            break;
        case QuestionType.MultiChoice:
            <SingleAnswerMultiSelectQuestionDisplay Question="@_currentQuestion.Title" Options="@_currentQuestion.Options" />
            break;
    }
}

@if(_state == AdminUserState.WaitingForQuestionStart)
{
    <QuestionAnswerChart 
        CorrectAnswers="@_currentQuestion.CorrectAnswers" 
        Options="@_currentQuestion.Options" 
        UserAnswers="@_userCurrentAnswers" 
        OnNextQuestion="@OnNextQuestion" 
        QuestionType="@_currentQuestion.Type" />
}

@if(_state == AdminUserState.ShowingPodium)
{
    <Podium Leaderboard="@_orderedLeaderboard"  Users="@_users" />
}


@code {
    private AdminUserState _state = AdminUserState.PickingGame;

    private HubConnection _hubConnection;

    private string _clientQuizId;

    private QuestionSet _questionSet = null;

    private Dictionary<string, string> _users = new Dictionary<string, string>();

    private Dictionary<string,  UserAnswer> _userCurrentAnswers = new Dictionary<string, UserAnswer>();

    private Dictionary<string, int> _leaderboard = new Dictionary<string, int>();
    private Dictionary<string, int> _orderedLeaderboard = new Dictionary<string, int>();

    private CancellationTokenSource _cts = new CancellationTokenSource();

    private int _currentQuestionIndex = 0;

    private Question _currentQuestion = null;

    private void OnQuestionSetSelected(QuestionSet questionSet){
        _questionSet = questionSet;
        _state = AdminUserState.WaitingForGameStart;
    }

    private async Task OnGameRegistered(string clientQuizId){
        _clientQuizId = clientQuizId;
        await _hubConnection.SendAsync("RegisterQuizSession", clientQuizId);
    }

    private async Task OnGameStarted(){
        _currentQuestionIndex = 0;
        await SendQuestion();
    }

    private async Task SendQuestion()
    {
        _currentQuestion = _questionSet.Questions[_currentQuestionIndex];
        _userCurrentAnswers.Clear();
        _state = AdminUserState.WaitingForAnswers;

        _cts = new CancellationTokenSource();
        await _hubConnection.SendAsync("SendQuestion", _clientQuizId, _currentQuestion.Title, _currentQuestion.Type, _currentQuestion.Options);

        using var tmr = new PeriodicTimer(TimeSpan.FromSeconds(_currentQuestion.Timeout));
        await tmr.WaitForNextTickAsync(_cts.Token);

        tmr.Dispose();
        await CloseQuestion();
        StateHasChanged();
    }

    private async Task OnNextQuestion()
    {
        if(_currentQuestionIndex + 1 >= _questionSet.Questions.Length)
        {
            //Show the final leaderboard
            _state = AdminUserState.ShowingPodium;
        }
        else
        {
            _currentQuestionIndex += 1;
            await SendQuestion();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/quizhub"))
            .Build();

        _hubConnection.On<string, string, string>("UserJoined", (quizId, userName, connectionId) =>
        {
            _users.Add(connectionId, userName);
            StateHasChanged();
        });

        _hubConnection.On<string, string, string, double>("ClientAnswerReceived", async (quizId, clientConnectionId, answer, timeTaken) =>
        {
            _userCurrentAnswers.Add(clientConnectionId, new UserAnswer { Answer = answer, TimeTaken = timeTaken } );
            if(_userCurrentAnswers.Count >= _users.Count)
            {
                await CloseQuestion();
            }
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task CloseQuestion()
    {
        _cts.Cancel();

        var questionMaxMs = (double)(_currentQuestion.Timeout * 1000);

        var correctAnswers = _userCurrentAnswers
            .Where(r => _currentQuestion.CorrectAnswers.Any(c=>r.Value.Answer == c))
            .OrderByDescending(r => r.Value.TimeTaken)
            .Select(r=>new { 
                UserId = r.Key, 
                Answer = r.Value.Answer, 
                Score = (int)(((questionMaxMs - r.Value.TimeTaken) / questionMaxMs) * 1000), 
                TimeTaken = r.Value.TimeTaken  })
            .ToArray();

        var incorrectAnswers = _userCurrentAnswers
            .Where(r => !_currentQuestion.CorrectAnswers.Any(c=>r.Value.Answer == c))
            .Select(r=>new { UserId = r.Key, Answer = r.Value.Answer, Score = 0, TimeTaken = r.Value.TimeTaken  })
            .ToArray();

        var noAnswer = _users.Where(r => !_userCurrentAnswers.ContainsKey(r.Key))
                        .Select(r => new { UserId = r.Key, Answer = "", Score = 0, TimeTaken = 0.0 })
                        .ToArray();

        var unionAnswers = correctAnswers.Union(incorrectAnswers).ToArray();
        unionAnswers = unionAnswers.Union(noAnswer).ToArray();

        foreach(var c in unionAnswers)
        {
            _leaderboard[c.UserId] = (_leaderboard.ContainsKey(c.UserId) ? _leaderboard[c.UserId] : 0) + c.Score;
        }

        _orderedLeaderboard = _leaderboard.OrderByDescending(r => r.Value).ToDictionary(k=>k.Key, v=>v.Value);

        foreach (var c in unionAnswers)
        {
            await _hubConnection.SendAsync("SendAnswerResult", _clientQuizId, c.UserId, _currentQuestion.CorrectAnswers, _leaderboard[c.UserId], (_orderedLeaderboard.Keys.ToList().IndexOf(c.UserId) + 1), (_currentQuestionIndex + 1 >= _questionSet.Questions.Length));
        }

        _state = AdminUserState.WaitingForQuestionStart;

    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


}
