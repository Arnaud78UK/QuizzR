@using QuizExperiment.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager


<div class="d-flex flex-column justify-content-center align-items-center">
    <h1 class="h1 text-center">Please scan the QR code below to join the quiz</h1>
    <img class="img-fluid rounded img-qrcode" src="/quiz/qrcode?clientQuizId=@_clientQuizId" />
    <h1 class="h1 text-center">or goto to <strong>@( Configuration.GetValue<string>("ClientJoinLink") )</strong> and enter the code <strong>@_clientQuizId</strong></h1>
    
</div>
<div class="d-flex flex-column justify-content-center align-items-center border-top">
    <button class="btn btn-primary btn-lg my-4" @onclick="@(e=> OnGameStarted.InvokeAsync())">Start</button>
</div>
<div class="d-flex flex-column justify-content-center align-items-center border-top">
    @if (Users.Count > 0)
    {
        <h3 class="h3 mt-4">Current Players (@(Users.Count))</h3>
        <div class="d-flex flex-wrap mt-4">
            @foreach (var u in Users)
            {
                <Animate Animation="Animations.ZoomIn" Duration="TimeSpan.FromSeconds(1)" >
                    <GameStartPlayer PlayerName="@u.Value" />
                </Animate>
        }
        </div>
    }
</div>
@code {
    [Parameter]
    public EventCallback OnGameStarted { get; set; }

    [Parameter]
    public EventCallback<string> OnGameRegistered { get; set; }

    [Parameter]
    public string QuestionSetId { get; set; }

    [Parameter]
    public Dictionary<string,string> Users { get; set; }

    private string _clientQuizId;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"quiz/newid?questionSetId={QuestionSetId}");
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = response.ReasonPhrase;
            Console.WriteLine($"There was an error getting the list of quizzes! {errorMessage}");
            return;
        }
        _clientQuizId = await response.Content.ReadAsStringAsync();
        OnGameRegistered.InvokeAsync(_clientQuizId);
        return;
    }
}
